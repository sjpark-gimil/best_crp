#include "main.h"
#include "gpio.h"
#include "i2c.h"
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

/* From Cube i2c.c */
extern I2C_HandleTypeDef hi2c1;

/* Watch variables (see in debugger) */
static volatile uint8_t  found_count = 0;
static volatile uint8_t  found_addrs[8] = {0};
static volatile uint32_t scan_calls  = 0;
static volatile uint32_t ready_acks  = 0;
static volatile uint32_t last_err    = 0;
static volatile int      scl_level   = -1;   // PB6
static volatile int      sda_level   = -1;   // PB7

static void sample_i2c_levels(void) {
  scl_level = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
  sda_level = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
}

/* probe PN532 (0x24) + sweep */
static void i2c1_scan(void) {
  scan_calls++;
  found_count = 0;
  ready_acks  = 0;

  HAL_StatusTypeDef s;

  /* explicit PN532 @ 0x24 (7-bit) */
  s = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(0x24u << 1), 1, 10);
  last_err = hi2c1.ErrorCode;
  if (s == HAL_OK && found_count < 8) { found_addrs[found_count++] = 0x24; }

  /* sweep bus */
  for (uint8_t a = 1; a < 0x7Fu && found_count < 8; ++a) {
    s = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(a << 1), 1, 2);
    if (s == HAL_OK) { found_addrs[found_count++] = a; ready_acks++; }
  }
}

/* Cube prototypes */
void SystemClock_Config(void);
void Error_Handler(void);

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_I2C1_Init();                 // <-- generated by Cube, uses PB6/PB7

  HAL_Delay(50);
  sample_i2c_levels();
  i2c1_scan();
  __BKPT(0);                     // STOP HERE and inspect variables

  while (1) {
    HAL_Delay(1000);
  }
}
/* ---- Simple MSI clock (~2.1 MHz) ---- */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5; // ~2.097 MHz
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
    Error_Handler();
  }
}

void Error_Handler(void)
{
  __disable_irq();
  while (1) { }
}
