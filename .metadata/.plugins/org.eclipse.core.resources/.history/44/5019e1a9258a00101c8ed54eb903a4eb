/* ==== main.c : I2C1 scanner on PB6/PB7 for PN532 detection ==== */
#include "main.h"
#include "gpio.h"
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

/* Cube prototypes */
void SystemClock_Config(void);
void Error_Handler(void);

/* ---- Local I2C1 handle ---- */
static I2C_HandleTypeDef hi2c1;

/* ---- Results (inspect in debugger) ---- */
static uint8_t  found_addrs[10];   // store up to 10 hits
static uint8_t  found_count = 0;

/* ---- Minimal I2C1 init on PB6/PB7, 100kHz ---- */
static void I2C1_Init_100k(void)
{
  /* Clocks */
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_I2C1_CLK_ENABLE();

  /* PB6=SCL, PB7=SDA (AF4) */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Pin       = GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;           // I2C needs pull-ups (board should have them)
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  hi2c1.Instance             = I2C1;
  hi2c1.Init.ClockSpeed      = 100000;
  hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1     = 0;
  hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2     = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
    Error_Handler();
  }
}

/* ---- Scan helper: try to ping each 7-bit addr with a zero-length write ---- */
static void i2c1_scan(void)
{
  found_count = 0;
  for (uint8_t addr = 1; addr < 0x7F; ++addr) {
    /* HAL expects the 7-bit addr shifted left by 1 */
    HAL_StatusTypeDef st = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(addr << 1), NULL, 0, 5);
    if (st == HAL_OK) {
      if (found_count < sizeof(found_addrs))
        found_addrs[found_count++] = addr;   // store 7-bit address
    }
  }
}

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();          // leave as generated by Cube
  I2C1_Init_100k();        // local init on PB6/PB7

  HAL_Delay(50);           // settle
  i2c1_scan();

  __BKPT(0);               // â–º STOP HERE: check found_count and found_addrs[] in Variables

  while (1) {
    HAL_Delay(1000);
  }
}

/* ---- Simple MSI clock (~2.1 MHz) ---- */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5; // ~2.097 MHz
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
    Error_Handler();
  }
}

void Error_Handler(void)
{
  __disable_irq();
  while (1) { }
}
